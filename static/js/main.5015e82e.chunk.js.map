{"version":3,"sources":["componentes/DoForm.js","componentes/ToDo.js","componentes/DoLista.js","App.js","index.js"],"names":["DoForm","props","useState","edit","value","input","setInput","handleChange","e","target","inputRef","useRef","useEffect","current","focus","className","onSubmit","preventDefault","id","window","performance","now","text","type","placeholder","name","onChange","ref","ToDo","to_dos","ToDoComplete","eliminarToDo","actualizarToDo","setEdit","valor","map","to_do","index","onClick","DoLista","setToDo","length","nuevoToDo","isCompleted","eliminar","filter","to_doId","nuevoValor","previo","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMA4DeA,MA1Df,SAAgBC,GACZ,MAAuBC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAO,IAA/D,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAe,SAAAC,GACjBF,EAASE,EAAEC,OAAOL,QAEhBM,EAAWC,iBAAO,MAkBxB,OAjBAC,qBAAU,WACNF,EAASG,QAAQC,WAiBjB,sBAAMC,UAAU,aAAaC,SAdZ,SAAAR,GAElBA,EAAES,iBAGFhB,EAAMe,SAAS,CACVE,GAAIC,OAAOC,YAAYC,MACvBC,KAAMjB,IAGZC,EAAS,KAIP,SACKL,EAAME,KACH,qCACA,uBACAoB,KAAK,OACLC,YAAY,SACZpB,MAAOC,EACPoB,KAAK,OACLV,UAAU,SACVW,SAAUnB,EACVoB,IAAKjB,IAET,wBAAQK,UAAU,qBAAlB,wBAGI,qCACA,uBACAQ,KAAK,OACLC,YAAY,oBACZpB,MAAOC,EACPoB,KAAK,OACLV,UAAU,cACVW,SAAUnB,EACVoB,IAAKjB,IAEL,wBAAQK,UAAU,cAAlB,2B,eCFDa,MA1Cf,YAAqE,IAAtDC,EAAqD,EAArDA,OAAQC,EAA6C,EAA7CA,aAAcC,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,eAC/C,EAAwB9B,mBAAS,CAC7BgB,GAAI,KACJd,MAAO,KAFX,mBAAOD,EAAP,KAAa8B,EAAb,KAWA,OAAG9B,EAAKe,GACG,cAAC,EAAD,CACPf,KAAMA,EACNa,SAVwB,SAAAkB,GACxBF,EAAe7B,EAAKe,GAAIgB,GACxBD,EAAQ,CACJf,GAAI,KACJd,MAAM,QAQPyB,EAAOM,KAAI,SAACC,EAAOC,GAAR,OACd,sBACCtB,UAAU,UADX,UAII,uBACAQ,KAAK,aACL,qBACCe,QAAS,kBAAMR,EAAaM,EAAMlB,KADnC,SAEKkB,EAAMd,MAFDc,EAAMlB,IAIhB,sBAAKH,UAAU,SAAf,UACC,cAAC,IAAD,CACGuB,QAAS,kBAAMP,EAAaK,EAAMlB,KAClCH,UAAU,iBAEb,cAAC,IAAD,CACGuB,QAAS,kBAAML,EAAQ,CAACf,GAAIkB,EAAMlB,GAAId,MAAOgC,EAAMd,QACnDP,UAAU,sBAfXsB,OC2BAE,MAlDf,WACI,MAAwBrC,mBAAS,IAAjC,mBAAO2B,EAAP,KAAcW,EAAd,KAmCA,OACI,gCACI,yDACA,cAAC,EAAD,CAAQxB,SAnCG,SAAAoB,GAEf,GAAyB,IAAtBA,EAAMd,KAAKmB,OAAd,CAGA,IAAMC,EAAS,CAAGN,GAAH,mBAAaP,IAC5BW,EAAQE,OA8BJ,cAAC,EAAD,CACAb,OAAQA,EACRC,aAfa,SAAAZ,GACjB,IAAIc,EAAgBH,EAAOM,KAAI,SAAAC,GAI3B,OAHGA,EAAMlB,KAAKA,IACVkB,EAAMO,aAAcP,EAAMO,aAEvBP,KAEXI,EAAQR,IASJD,aArBa,SAAAb,GACjB,IAAM0B,EAAW,YAAIf,GAAQgB,QAAO,SAAAT,GAAK,OAAIA,EAAMlB,KAAOA,KAC1DsB,EAAQI,IAoBJZ,eA/Be,SAACc,EAASC,GAEC,IAA3BA,EAAWzB,KAAKmB,QAGnBD,GAAQ,SAAAQ,GAAM,OAAIA,EAAOb,KAAI,SAAAc,GAAI,OAAIA,EAAK/B,IAAM4B,EAAUC,EAAYE,eCX/DC,MARf,WACE,OACE,qBAAKnC,UAAU,MAAf,SACE,cAAC,EAAD,OCFNoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5015e82e.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\r\n\r\nfunction DoForm(props) {\r\n    const [input,setInput]=useState(props.edit ? props.edit.value: '');\r\n    const handleChange = e =>{\r\n        setInput(e.target.value);\r\n    }\r\n    const inputRef = useRef(null)\r\n    useEffect(() => {\r\n        inputRef.current.focus()\r\n    });\r\n\r\n    const handleSubmit = e =>{\r\n    //evitamos refresh de la pagina al apretar el boton\r\n       e.preventDefault();\r\n    \r\n       //agregamos una tarea con un id diferente por cada ingreso\r\n       props.onSubmit({\r\n            id: window.performance.now(),\r\n            text: input\r\n       });\r\n      //reiniciamos el input\r\n      setInput('');\r\n        \r\n    }\r\n    return (\r\n        <form className=\"formulario\" onSubmit={handleSubmit}>\r\n            {props.edit ? (\r\n                <>\r\n                <input \r\n                type=\"text\" \r\n                placeholder=\"Editar\" \r\n                value={input} \r\n                name='text'\r\n                className=\"editar\"\r\n                onChange={handleChange}\r\n                ref={inputRef}\r\n                />\r\n            <button className='boton_to-do_editar'>Agregar</button>\r\n            </>\r\n            ):(\r\n                <>\r\n                <input \r\n                type=\"text\" \r\n                placeholder=\"agregar actividad\" \r\n                value={input} \r\n                name='text'\r\n                className=\"input_to-do\"\r\n                onChange={handleChange}\r\n                ref={inputRef}\r\n                />\r\n                <button className='boton_to-do'>Agregar</button>\r\n                </>\r\n            )\r\n        }\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default DoForm\r\n","import React, {useState} from 'react'\r\nimport DoForm from './DoForm'\r\n//iconos\r\nimport {AiFillDelete} from 'react-icons/ai';\r\nimport {MdEdit} from 'react-icons/md'\r\n\r\n\r\nfunction ToDo({to_dos, ToDoComplete, eliminarToDo, actualizarToDo}) {\r\n    const [edit, setEdit] = useState({\r\n        id: null,\r\n        value: ''\r\n    });\r\n    const enviarActualizacion = valor => {\r\n        actualizarToDo(edit.id, valor);\r\n        setEdit({\r\n            id: null,\r\n            value:\"\"\r\n        });\r\n    }\r\n    if(edit.id){\r\n        return <DoForm \r\n        edit={edit} \r\n        onSubmit={enviarActualizacion}/>\r\n    }\r\n    return to_dos.map((to_do, index)=>(\r\n        <div \r\n         className='do_fila'\r\n         key ={index} \r\n        >\r\n            <input\r\n            type=\"checkbox\"/>\r\n            <div key={to_do.id}\r\n             onClick={() => ToDoComplete(to_do.id)}>\r\n                {to_do.text}\r\n            </div>\r\n            <div className=\"iconos\">\r\n             <AiFillDelete\r\n                onClick={() => eliminarToDo(to_do.id)}\r\n                className=\"icono-borrar\"\r\n             />\r\n             <MdEdit\r\n                onClick={() => setEdit({id: to_do.id, value: to_do.text})}\r\n                className=\"icono-editar\"\r\n             />\r\n            </div>\r\n        </div>\r\n    ))\r\n}\r\n\r\nexport default ToDo\r\n","import React, {useState} from 'react'\r\nimport DoForm from './DoForm'\r\nimport ToDo from './ToDo'\r\n\r\nfunction DoLista() {\r\n    const [to_dos,setToDo] =useState([]);\r\n    \r\n    //agregar una nueva tarea\r\n    const agregarToDo =to_do =>{\r\n        //chequeamos que no ingresen vacio\r\n        if(to_do.text.length === 0){\r\n            return\r\n        }\r\n        const nuevoToDo =[to_do, ...to_dos];\r\n        setToDo(nuevoToDo);\r\n    }\r\n    //actualizamos tarea\r\n    const actualizarToDo = (to_doId, nuevoValor) =>{\r\n        //chequeamos que no ingresen vacio\r\n        if(nuevoValor.text.length === 0){\r\n            return\r\n        }\r\n        setToDo(previo => previo.map(item =>(item.id == to_doId ? nuevoValor: item))\r\n        )\r\n    }\r\n    //eliminar tarea\r\n    const eliminarToDo = id => {\r\n        const eliminar = [...to_dos].filter(to_do => to_do.id !== id)\r\n        setToDo(eliminar);\r\n    }\r\n    //marcar tarea como completada\r\n    const ToDoComplete = id => {\r\n        let actualizarToDo= to_dos.map(to_do =>{\r\n            if(to_do.id===id){\r\n                to_do.isCompleted =!to_do.isCompleted\r\n            }\r\n            return to_do;\r\n        })\r\n        setToDo(actualizarToDo);\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>The Greatest to-do list</h1>\r\n            <DoForm onSubmit={agregarToDo} />\r\n            <ToDo \r\n            to_dos={to_dos} \r\n            ToDoComplete={ToDoComplete}\r\n            eliminarToDo={eliminarToDo}\r\n            actualizarToDo={actualizarToDo}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DoLista\r\n","import './App.css';\nimport DoLista from './componentes/DoLista';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DoLista/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}